# -*- coding: utf-8 -*-
"""
Created on Wed Mar 29 13:49:44 2023

@author: JohnnyCCHuang
"""
import cv2
import numpy as np
import os
import glob
import time


### 2,3
key_x1 = 0
key_y1 = 400
key_x2 = 1600
key_y2 = 670
###1
# key_x1 = 0
# key_y1 = 200
# key_x2 = 1600
# key_y2 = 500

CutY = False

thold = 3 ##體積小於多少pass
diffthold = 10 ##灰階差異大於多少才顯現0~255,越小越靈敏
MP4 = True ##True,False  直接轉成影片檔
OneP = False ##True,False  只跑一張
Cunt = True ##False 只保留有異常的,True 完整保留

Nor_start_time = 0.0
Nor_end_time = 2.0

for videoFile in ['Particle_0602_1.avi','Particle_0602_2.avi']:
 # 影片檔案
    # videoFile = "Particle01.avi"

    # 開啟影片檔
    cap = cv2.VideoCapture(videoFile)
    fps = cap.get(cv2.CAP_PROP_FPS)
    
    start_frame = int(Nor_start_time*fps)
    end_frame = int(Nor_end_time*fps)
    cap.set(cv2.CAP_PROP_POS_FRAMES,start_frame)
    
    # 初始化平均畫面
    
    ret, frame = cap.read()
    
    
    # 取得畫面尺寸
    if CutY:
        width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
        height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
        cut_frame = frame.copy()
    else:
        width = key_x2 -key_x1
        height = key_y2 - key_y1
        cut_frame = frame[key_y1:key_y2,key_x1:key_x2]
    # 計算畫面面積
    area = width * height
    
    gray_frame = cv2.cvtColor(cut_frame, cv2.COLOR_BGR2GRAY)
    
    imgUp = np.load('imgUp.npy')
    imgLo = np.load('imgLo.npy')

    # 輸出圖檔用的計數器
    outputCounter = 0
    # 輸出目錄
    outputFolder = "%s_%s_w%s_h%s_v21"%(videoFile.split('.')[0],thold,width,height)
    # 自動建立目錄
    if not os.path.exists(outputFolder):
        os.makedirs(outputFolder)
    while(cap.isOpened()):
        outputCounter += 1
        # 讀取一幅影格
        ret, frame = cap.read()
        # 若讀取至影片結尾，則跳出
        if ret == False:
            break
        if CutY:
            cut_frame = frame.copy()
        else:    
            cut_frame = frame[key_y1:key_y2,key_x1:key_x2]
        cut_frame_x,cut_frame_y,_ = cut_frame.shape
        
        gray_frame = cv2.cvtColor(cut_frame, cv2.COLOR_BGR2GRAY)
        

        C1 = gray_frame * [imgLo-diffthold > gray_frame][0]
        C2 = gray_frame * [imgUp+diffthold < gray_frame][0]
        C = C1*C2
            
        ret, thresh = cv2.threshold(C, 0 , 255, cv2.THRESH_BINARY)
        # 產生等高線
        cntImg, cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
  
        hasMotion = False
        cu = 0
        carx = 0
        for c in cntImg:
            # 忽略太小的區域
            if cv2.contourArea(c) < thold:
                continue
            hasMotion = True
            # 計算等高線的外框範圍
            (x, y, w, h) = cv2.boundingRect(c)
            # 畫出外框
            cv2.rectangle(cut_frame, (x, y), (x + w, y + h), (0, 255, 0), 1)
            cu +=1
            carx = carx + cv2.contourArea(c)
        if hasMotion or Cunt:
            # 儲存有變動的影像
            font = cv2.FONT_HERSHEY_SIMPLEX
            cv2.putText(cut_frame, str(cu), (cut_frame_y-300,cut_frame_x-20), font,2, (255, 0, 255), 2, cv2.LINE_AA)
            cv2.putText(cut_frame, str(carx), (0,cut_frame_x-20), font,2, (0, 255, 255), 2, cv2.LINE_AA)
            cv2.imwrite("%s/output_%04d.jpg" % (outputFolder, outputCounter), cut_frame)
            if OneP:
                ee
                

    cap.release()

    if MP4:
        '''
        find jpg 2 mp4
        '''
        path = f"./{outputFolder}/*.jpg" 
        k1 = videoFile.split('.')[-1]
        result_name = 'output_%s_v21.mp4'%(outputFolder)
        
        frame_list = sorted(glob.glob(path))
        print("frame count: ",len(frame_list))
        
        
        shape = cv2.imread(frame_list[0]).shape # delete dimension 3
        size = (shape[1], shape[0])
        print("frame size: ",size)
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        out = cv2.VideoWriter(result_name, fourcc, fps, size)
        
        for idx, path in enumerate(frame_list):
            frame = cv2.imread(path)
            os.remove(path)
            # print("\rMaking videos: {}/{}".format(idx+1, len(frame_list)), end = "")
            current_frame = idx+1
            total_frame_count = len(frame_list)
            percentage = int(current_frame*fps / (total_frame_count+1))
            print("\rProcess: [{}{}] {:06d} / {:06d}".format("#"*percentage, "."*int(fps-1-percentage), current_frame, total_frame_count), end ='')
            out.write(frame)
        
        out.release()
        os.rmdir(f"./{outputFolder}")
        print("Finish making video !!!")
